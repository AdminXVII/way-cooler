tests.rs:11:    fn root_setup() -> Node {
tests.rs:37:        // This is the tippity-top of the tree
containers.rs:69:    pub fn new_root() -> Node {
containers.rs:90:    pub fn new_workspace(root: &mut Node) -> Node {
containers.rs:119:    pub fn new_container(parent_: &mut Node, output: WlcOutput) -> Node {
containers.rs:145:    pub fn new_view(parent_: &mut Node, view: WlcView) -> Node {
containers.rs:184:    pub fn get_parent(&self) -> Option<Node> {
containers.rs:198:    pub fn add_child(&mut self, container: Node) -> Result<(), &'static str> {
containers.rs:210:    pub fn add_sibling(&mut self, container: Node) -> Result<(), &'static str> {
containers.rs:222:    pub fn remove_container(&self) -> Result<(), &'static str> {
containers.rs:239:    pub fn get_children(&self) -> Option<&[Node]> {
containers.rs:249:    pub fn get_type(&self) -> ContainerType {
containers.rs:254:    pub fn is_focused(&self) -> bool {
containers.rs:259:    pub fn remove_child_at(&mut self, index: usize) -> Result<Node, &'static str> {
containers.rs:270:    pub fn remove_child(&mut self, node: &Container) -> Result<Node, &'static str> {
containers.rs:290:    pub fn get_visibility(&self) -> bool {
containers.rs:295:    pub fn get_dimensions(&self) -> (u32, u32) {
containers.rs:300:    pub fn get_position(&self) -> (i32, i32) {
containers.rs:305:    pub fn is_parent_of(&self, child: Node) -> bool {
containers.rs:320:    pub fn is_child_of(&self, parent: Node) -> bool {
containers.rs:324:    pub fn is_root(&self) -> bool {
containers.rs:329:    pub fn get_parent_by_type(&self, container_type: ContainerType) -> Option<Node> {
containers.rs:345:    fn eq(&self, other: &Container) -> bool {
containers.rs:353:    fn fmt(&self, f: &mut Formatter) -> FmtResult {
