pub type Node = Rc<RefCell<Container>>;


pub fn new_root() -> Node;
pub fn new_output(root: &mut Node, wlc_output: WlcOutput) -> Node;
pub fn new_workspace(parent_: &mut Node) -> Node;
pub fn new_container(parent_: &mut Node) -> Node;
pub fn new_view(parent_: &mut Node, wlc_view: WlcView) -> Node;
pub fn get_parent(&self) -> Option<Node>;
pub fn add_child(&mut self, container: Node) -> Result<(), &'static str>;
pub fn add_sibling(&self, container: Node) -> Result<(), &'static str>;
pub fn remove_container(&self) -> Result<(), &'static str>;
pub fn get_children(&self) -> Option<&[Node]>;
pub fn get_type(&self) -> ContainerType;
pub fn get_handle(&self) -> Option<Handle>;
pub fn is_focused(&self) -> bool;
pub fn remove_child_at(&mut self, index: usize) -> Result<Node, &'static str>;
pub fn remove_child(&mut self, node: &Container) -> Result<Node, &'static str>;
pub fn set_visibility(&mut self, visibility: bool);
pub fn get_visibility(&self) -> bool;
pub fn get_dimensions(&self) -> Option<(u32, u32)>;
pub fn get_position(&self) -> Option<(i32, i32)>;
pub fn is_parent_of(&self, child: Node) -> bool;
pub fn is_child_of(&self, parent: Node) -> bool;
pub fn is_root(&self) -> bool;
pub fn get_parent_by_type(&self, container_type: ContainerType) -> Option<Node>;
