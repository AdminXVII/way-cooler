language: rust
rust:
  - stable
 sudo: false

cache:
  - cargo
  - pip
  - directories:
      # kcov
      - $TRAVIS_BUILD_DIR/kcov

addons:
  apt:
    packages:
      - libcurl4-openssl-dev
      - libelf-dev
      - libdw-dev
      - binutils-dev
      - lua5.2

notifications:
  slack:
    rooms:
      - way-cooler:W2vOSvJvgxGi7EiGkZCtvlB6#way-cooler
    on_success: :change
    on_failure: :change
  email: false

before_script:
  # install travis-cargo
  - git clone https://github.com/Timidger/travis-cargo
  - export PATH=$HOME/.local/bin:$PATH
  - (cd travis-cargo; pip install -e . --user)
  # install dependencies for ci.py
  - pip install --user docopt
  - pip install --user semver

script:
  # check integrity of Lua files in /lib/lua/
  - for file in $( find lib/lua -type f -name "*.lua" ); do echo Checking $file; luac -p $file; done
  # check integrity of init file
  - luac -p config/init.lua
  # Make sure no-test builds
  - cargo check
  # run tests
  - cargo test --verbose
  # run tag checks
  - python $TRAVIS_BUILD_DIR/ci.py travis-check

after_success:
  # Test and upload coverage to coveralls
  # Justification of excluded files:
  # main.rs: just initialization of logging, sigkill handler, and initializing lazy static objects. (Arg parsing should be moved into a different module and tested)
  # mod.rs: although at the moment we have too much code in various mod.rs's these are not really testable either way
  # tests.rs: should not be running on our tests themselves
  # wayland_client_api.rs: we really don't have a good way of testing any of this. At the moment it's simple enough that if it didn't work it would be obvious in user testing.
  # callbacks.rs: we don't have any integration tests for callbacks right now. They'd need to deal with the lazy statics that the other components of the program live in.
  - travis-cargo coveralls --no-sudo --verify --exclude-pattern="main.rs,mod.rs,tests.rs,wayland_client_api.rs,callbacks.rs"
